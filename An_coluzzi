########

df = data.frame(Length = rep(16:29, 2), 
                Percent = c(81, 75, 88, 74, 82, 76, 75, 78, 74, 74, 76, 75, 72, 84, 10, 17, 19, 15, 44, 75, 81, 50, 44, 55, 85, 53, 70, 59),
                Cell = c(rep('Germ cells', 14), rep('Somatic cells', 14)))



df = data.frame(Length = rep(16:29, 2), 
                Percent = c(37, 24, 8, 30, 20, 27, 19, 22, 20, 21, 20, 22, 17, 61,
                            6, 11, 12, 6, 30, 14, 31, 20, 20, 14, 73, 14, 14, 7),
                Cell = c(rep('Germ cells', 14), rep('Somatic cells', 14)))

df = data.frame(Length = rep(16:29, 2), 
                Percent = c(31, 25, 22, 26, 23, 22, 21, 20, 20, 17, 15, 15, 15, 15,
                            14, 16, 21, 20, 22, 26, 22, 20, 19, 17, 16, 16, 14, 12),
                Cell = c(rep('Germ cells', 14), rep('Somatic cells', 14)))





ggplot(data = df, aes(x = Length, y = Percent, fill = Cell)) + 
  facet_wrap(.~Cell) + geom_bar(stat = 'identity') + theme_bw() +
  ggtitle('Percent of successful alignment to transcripts with 0 mismathes, collapsed libs')



########## collapsed:
germ = readDNAStringSet('~/february21/to_miRNA/SRR1927173_trimmed.f4.fasta.sam.bam.fasta.sam.bam.fasta')
germ = data.frame(germ)
germ_DNA = DNAStringSet(unique(germ$germ))
names(germ_DNA) = 1:2599721
writeXStringSet(germ_DNA, '~/february21/to_miRNA/collapsed_germ.fasta')

soma = readDNAStringSet('~/february21/to_miRNA/mh1.f4.fasta.sam.bam.fasta.sam.bam.fasta')
soma = data.frame(soma)
soma_DNA = DNAStringSet(unique(soma$soma))
names(soma_DNA) = 1:91685
writeXStringSet(soma_DNA, '~/february21/to_miRNA/collapsed_soma.fasta')







######mh1 FIX ME:
library('ShortRead')
mh1 = readFastq('~/Anopheles_part5/trimmed_libs/male_head_rep1_trimmed.fastq')
df= data.frame(seq = as.character(mh1@sread))
mh1 = data.frame(table(df$seq))
df = NULL

mh1 = mh1[10000:10005,]

#Каждый рид попробовать выровнять на геном с -v 0, YES если выравнивается, NO если нет.

align_to_genome = function(sequence){
  .unlist <- function (x){
    ## do.call(c, ...) coerces factor to integer, which is undesired
    x1 <- x[[1L]]
    if (is.factor(x1)){
      structure(unlist(x), class = "factor", levels = levels(x1))
    } else {
      do.call(c, x)
    }
  }
  bam_to_df <- function(path){
    bam <- scanBam(path)
    bam_field <- names(bam[[1]])
    list_bam <- lapply(bam_field, function(y) .unlist(lapply(bam, "[[", y)))
    bam_df <- do.call("DataFrame", list_bam)
    names(bam_df) <- bam_field
    bam_df <- data.frame(bam_df)
    return(bam_df)
  }
  
  seq = DNAStringSet(sequence)
  names(seq) = 'My_seq'
  writeXStringSet(seq, '/mnt/raid/pro_milka/fucking_komar/FUCK/seq.fasta')
  system('bowtie -f /mnt/raid/pro_milka/fucking_komar/FUCK/seq.fasta -v 0 -a --threads 64 --index /mnt/raid/pro_milka/Anopheles_part3/Acol_genome/Acol_genome --sam > /mnt/raid/pro_milka/fucking_komar/FUCK/genomeal/file.sam')
  system('samtools view -bh -F 4 /mnt/raid/pro_milka/fucking_komar/FUCK/genomeal/file.sam > /mnt/raid/pro_milka/fucking_komar/FUCK/genomeal/F4/file.F4.bam')
  align = bam_to_df('/mnt/raid/pro_milka/fucking_komar/FUCK/genomeal/F4/file.F4.bam')
  system('rm /mnt/raid/pro_milka/fucking_komar/FUCK/seq.fasta')
  system('rm /mnt/raid/pro_milka/fucking_komar/FUCK/genomeal/file.sam')
  system('rm /mnt/raid/pro_milka/fucking_komar/FUCK/genomeal/F4/file.F4.bam')
  
  if (nrow(align) == 0){
    return(0)
  }
  else{
    return(nrow(align))
  }
}
mh1$align_to_genome_v0 = lapply(as.character(mh1$Var1), align_to_genome)
mh1$align_to_genome_v0 = as.character(mh1$align_to_genome_v0)


write.table(mh1, '~/fucking_komar/FUCK/Summary.out', quote = F, col.names = T)

my_data = read.table('~/fucking_komar/FUCK/Summary')
ggplot(data = my_data, aes(x = log10(Freq), y = log10(align_to_genome_v0))) + geom_point() 
nrow(my_data[my_data$align_to_genome_v0 == 0,])



#Для тех, у кого v0 = 0 запустить v3 понять, что меняется и в скольки штуках. 


#extract v0 = 0.

unan = my_data[my_data$align_to_genome_v0 == 0,]
sum(unan$Freq) - 2841566 - 490276

DNA = DNAStringSet(my_data[my_data$align_to_genome_v0 == 0,]$Var1)
names(DNA) = 1:104208
writeXStringSet(DNA, '~/fucking_komar/FUCK/genome_v0.fasta')




##start

.unlist <- function (x){
  ## do.call(c, ...) coerces factor to integer, which is undesired
  x1 <- x[[1L]]
  if (is.factor(x1)){
    structure(unlist(x), class = "factor", levels = levels(x1))
  } else {
    do.call(c, x)
  }
}
bam_to_df <- function(path){
  bam <- scanBam(path)
  bam_field <- names(bam[[1]])
  list_bam <- lapply(bam_field, function(y) .unlist(lapply(bam, "[[", y)))
  bam_df <- do.call("DataFrame", list_bam)
  names(bam_df) <- bam_field
  bam_df <- data.frame(bam_df)
  return(bam_df)
}

secret = bam_to_df('~/fucking_komar/FUCK/out_v3.sam.F4.bam')
secret = secret[secret$qwidth >= 24,]

secret_plus = secret[secret$strand == '+',]
secret_minus = secret[secret$strand == '-',]

y = secret_plus
GR = GRanges(seqnames = as.character(y$rname), ranges = IRanges(start = as.numeric(as.character(y$pos)), 
                                                               width = as.numeric(as.character(y$qwidth))), 
             strand = '+',
             seq = as.character(y$seq))






genome = readDNAStringSet('~/Anopheles_part2/AcolMOP1_genome.fasta')
genome@ranges@NAMES = unlist(lapply(strsplit(genome@ranges@NAMES, ' '), function(x)x[1]))
GR$sequence = getSeq(genome, GR)


#RC seq

s = DNAStringSet(GR$seq)
s[1]
s = reverseComplement(s)
s[1]
GR$seq = s



GR = data.frame(GR)
GR$CIGAR = NA

my_function = function(a, b){
  a = unlist(strsplit(a,''))
  b = unlist(strsplit(b,''))
  CIGAR = vector()
  for (i in 1:length(a)){
    if (a[i] == b[i]){
      CIGAR = c(CIGAR, '*')
    }
    else{
      CIGAR = c(CIGAR,paste(a[i],'/',b[i], sep=''))
    }
  }
  
  CIGAR = paste(CIGAR, collapse = ' ')
  
  return(CIGAR)
  
}

for (i in 1:nrow(GR)){
  
  GR$CIGAR[i] = my_function(GR$seq[i], GR$sequence[i])
  
  if ((i %% 5000) == 0){
    print(i)
  }
}





data = paste(GR$CIGAR)
data = unlist(data)
data







sum = ''
length(data)
for (i in 1:length(data)){
  sum = paste(sum,' ', data[i])
  
  
  if ((i %% 5000) == 0){
    print(i)
  }
  
}


sum = strsplit(sum, ' ')
result = data.frame(table(sum))

result = result[3:18,]
write.table(result, '~/fucking_komar/ANALYSIS/minus_SNP.out', row.names = F, quote = F)



plus = read.table('~/fucking_komar/ANALYSIS/plus_SNP.out')
plus = plus[2:17,]
minus = read.table('~/fucking_komar/ANALYSIS/minus_SNP.out')
minus = minus[2:17,]

s = rbind(plus, minus)
s$V1 = factor(s$V1)
s$V2 = as.numeric(as.character(s$V2))


ggplot(data = result, aes(x = sum, y = Freq, fill = sum)) + 
  geom_bar(stat = 'identity') + theme_bw() +
  labs(fill = 'SNP:') +
  xlab('Letter in sRNA lib / Letter in a genome') + 
  ylab('Count') + 
  ggtitle('SNPs for reads that was not align with -v 0 but aligned with -v 3.\nLibrary was firstly collapsed: each of multicopy reads was taken only once')









#delete overrepresented sequences
library('readxl')
data = readxl::read_xlsx('~/fucking_komar/overrepresented.xlsx', col_names = F)
seq = data$...1
seq = DNAStringSet(seq)
names(seq) = 1:87
writeXStringSet(seq, '~/fucking_komar/overrepresented_sequences.fasta')

initial_dist = function(ld_path, name){
  file = read.table(ld_path)
  plot = ggplot(data = file, aes(x = V2, y = V1)) +
    geom_bar(stat = 'identity') + 
    theme_bw() +
    xlab('small RNA length') + 
    ylab('Number of reads') + 
    ggtitle(name) +
    theme(text = element_text(size = 15), legend.position = "none") +
    scale_x_continuous(breaks = c(16, 18, 20, 22, 24, 26, 28, 30, 32, 34))
  
  return(plot)
}
.unlist <- function (x){
  ## do.call(c, ...) coerces factor to integer, which is undesired
  x1 <- x[[1L]]
  if (is.factor(x1)){
    structure(unlist(x), class = "factor", levels = levels(x1))
  } else {
    do.call(c, x)
  }
}
bam_to_df <- function(path){
  bam <- scanBam(path)
  bam_field <- names(bam[[1]])
  list_bam <- lapply(bam_field, function(y) .unlist(lapply(bam, "[[", y)))
  bam_df <- do.call("DataFrame", list_bam)
  names(bam_df) <- bam_field
  bam_df <- data.frame(bam_df)
  return(bam_df)
}




check = bam_to_df('~/fucking_komar/al_to_genome_v0/flag_f4/female_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam')
View(as.data.frame(table(check$seq)))




############initial distribution of pure reads:
setwd('~/Anopheles_part5/align_not_xRNA_to_miRNA/flag_f4/')

mh1 = initial_dist('male_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                   'Male head rep1')
mh2 = initial_dist('male_head_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                   'Male head rep2')
mh3 = initial_dist('male_head_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                   'Male head rep3')
mt1 = initial_dist('male_thorax_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                   'Male thorax rep1')
mt2 = initial_dist('male_thorax_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                   'Male thorax rep2')
mt3 = initial_dist('male_thorax_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                   'Male thorax rep3')
fh1 = initial_dist('female_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                   'Female head rep1')
fh2 = initial_dist('female_head_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                   'Female head rep2')
fh3 = initial_dist('female_head_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                   'Female head rep3')
ft1 = initial_dist('female_thorax_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                   'Female thorax rep1')
ft2 = initial_dist('female_thorax_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                   'Female thorax rep2')
ft3 = initial_dist('female_thorax_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                   'Female thorax rep3')


gridExtra::grid.arrange(mh1, mh2, mh3, mt1, mt2, mt3, fh1, fh2, fh3, ft1, ft2, ft3,
                        nrow = 4)
























#tracer filtered data:
#length distribution, alignments:
library("viridis")           

align_distribution_plot = function(initial_dist,
                                   aligned_to_xRNA,
                                   aligned_miRNA,
                                   gg_title){
  initial = read.table(initial_dist)
  if (nrow(initial) == 19){
    if (identical(initial$V2, c(16:34))){
      initial_upd = initial
    }
    else{
      print('Really?')
    }}
  else{
    initial_upd = data.frame(V2 = c(16:34),
                             V1 = NA)
    initial_upd$V1 = initial[match(initial_upd$V2, initial$V2),]$V1
    initial_upd$V1 = ifelse(is.na(initial_upd$V1), 0, initial_upd$V1)
  }
  
  xRNA = read.table(aligned_to_xRNA)
  if (nrow(xRNA) == 19){
    if (identical(xRNA$V2, c(16:34))){
      xRNA_upd = xRNA
    }
    else{
      print('Really?')
    }}
  else{
    xRNA_upd = data.frame(V2 = c(16:34),
                          V1 = NA)
    xRNA_upd$V1 = xRNA[match(xRNA_upd$V2, xRNA$V2),]$V1
    xRNA_upd$V1 = ifelse(is.na(xRNA_upd$V1), 0, xRNA_upd$V1)
  }
  
  miRNA = read.table(aligned_miRNA)
  if (nrow(miRNA) == 19){
    if (identical(miRNA$V2, c(16:34))){
      miRNA_upd = miRNA
    }
    else{
      print('Really?')
    }}
  else{
    miRNA_upd = data.frame(V2 = c(16:34),
                           V1 = NA)
    miRNA_upd$V1 = miRNA[match(miRNA_upd$V2, miRNA$V2),]$V1
    miRNA_upd$V1 = ifelse(is.na(miRNA_upd$V1), 0, miRNA_upd$V1)
  }
  
  df = data.frame(length = rep(initial_upd$V2, 3), 
                  count = c(initial_upd$V1 - xRNA_upd$V1, 
                            xRNA_upd$V1 - miRNA_upd$V1, 
                            miRNA_upd$V1),
                  small_RNA_type = c(rep('rRNA, tRNA, snRNA, snoRNA', 19), rep('miRNA', 19), rep('Other small RNAs', 19)))
  
  normalization_coeff = sum(initial_upd$V1)
  df$count = df$count * 1000000/ normalization_coeff
  
  plot = ggplot(data = df, aes(x = length, y = count, fill = small_RNA_type)) + 
    geom_bar(stat = "identity") + 
    theme_bw() +
    xlab('small RNA length') + 
    ylab('Count, RPM') + 
    ggtitle(gg_title) + 
    theme(text = element_text(size = 15), legend.position = "none") +
    scale_x_continuous(breaks = c(16, 18, 20, 22, 24, 26, 28, 30, 32, 34)) + 
    labs(fill = 'Small RNA type:') +
    scale_fill_manual(values = c('rRNA, tRNA, snRNA, snoRNA' = "deepskyblue2", 'miRNA' = "seagreen3", 
                                 'Other small RNAs' = "tomato"))
  return(plot)
}

align_distribution_plot_legend = function(initial_dist,
                                          aligned_to_xRNA,
                                          aligned_miRNA,
                                          gg_title){
  initial = read.table(initial_dist)
  if (nrow(initial) == 19){
    if (identical(initial$V2, c(16:34))){
      initial_upd = initial
    }
    else{
      print('Really?')
    }}
  else{
    initial_upd = data.frame(V2 = c(16:34),
                             V1 = NA)
    initial_upd$V1 = initial[match(initial_upd$V2, initial$V2),]$V1
    initial_upd$V1 = ifelse(is.na(initial_upd$V1), 0, initial_upd$V1)
  }
  
  xRNA = read.table(aligned_to_xRNA)
  if (nrow(xRNA) == 19){
    if (identical(xRNA$V2, c(16:34))){
      xRNA_upd = xRNA
    }
    else{
      print('Really?')
    }}
  else{
    xRNA_upd = data.frame(V2 = c(16:34),
                          V1 = NA)
    xRNA_upd$V1 = xRNA[match(xRNA_upd$V2, xRNA$V2),]$V1
    xRNA_upd$V1 = ifelse(is.na(xRNA_upd$V1), 0, xRNA_upd$V1)
  }
  
  miRNA = read.table(aligned_miRNA)
  if (nrow(miRNA) == 19){
    if (identical(miRNA$V2, c(16:34))){
      miRNA_upd = miRNA
    }
    else{
      print('Really?')
    }}
  else{
    miRNA_upd = data.frame(V2 = c(16:34),
                           V1 = NA)
    miRNA_upd$V1 = miRNA[match(miRNA_upd$V2, miRNA$V2),]$V1
    miRNA_upd$V1 = ifelse(is.na(miRNA_upd$V1), 0, miRNA_upd$V1)
  }
  
  df = data.frame(length = rep(initial_upd$V2, 3), 
                  count = c(initial_upd$V1 - xRNA_upd$V1, 
                            xRNA_upd$V1 - miRNA_upd$V1, 
                            miRNA_upd$V1),
                  small_RNA_type = c(rep('rRNA, tRNA, snRNA, snoRNA', 19), rep('miRNA', 19), rep('Other small RNAs', 19)))
  
  normalization_coeff = sum(initial_upd$V1)
  df$count = df$count * 1000000/ normalization_coeff
  
  plot = ggplot(data = df, aes(x = length, y = count, fill = small_RNA_type)) + 
    geom_bar(stat = "identity") + 
    theme_bw() +
    xlab('small RNA length') + 
    ylab('Count, RPM') + 
    ggtitle(gg_title) + 
    theme(text = element_text(size = 15), legend.position = "top", legend.direction = "vertical") +
    scale_x_continuous(breaks = c(16, 18, 20, 22, 24, 26, 28, 30, 32, 34)) + 
    labs(fill = 'Small RNA type:') +
    scale_fill_manual(values = c('rRNA, tRNA, snRNA, snoRNA' = "deepskyblue2", 'miRNA' = "seagreen3", 
                                 'Other small RNAs' = "tomato"))
  return(plot)
}

extract_legend <- function(my_ggp) {
  step1 <- ggplot_gtable(ggplot_build(my_ggp))
  step2 <- which(sapply(step1$grobs, function(x) x$name) == "guide-box")
  step3 <- step1$grobs[[step2]]
  return(step3)
}

setwd('~/Anopheles_part5/')

legend = align_distribution_plot_legend('align_to_tracer/flag_f4/male_head_rep3_trimmed.fastq.sam.f4.bam.fasta.length_distribution',
                              'align_to_xBase/flag_f4/male_head_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'align_not_xRNA_to_miRNA/flag_f4/male_head_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'Male head rep3'
)


shared_legend <- extract_legend(legend)


mh1 = align_distribution_plot('align_to_tracer/flag_f4/male_head_rep1_trimmed.fastq.sam.f4.bam.fasta.length_distribution',
                              'align_to_xBase/flag_f4/male_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'align_not_xRNA_to_miRNA/flag_f4/male_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'Male head rep1'
)

mh2 = align_distribution_plot('align_to_tracer/flag_f4/male_head_rep2_trimmed.fastq.sam.f4.bam.fasta.length_distribution',
                              'align_to_xBase/flag_f4/male_head_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'align_not_xRNA_to_miRNA/flag_f4/male_head_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'Male head rep2'
)

mh3 = align_distribution_plot('align_to_tracer/flag_f4/male_head_rep3_trimmed.fastq.sam.f4.bam.fasta.length_distribution',
                              'align_to_xBase/flag_f4/male_head_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'align_not_xRNA_to_miRNA/flag_f4/male_head_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'Male head rep3'
)

mt1 = align_distribution_plot('align_to_tracer/flag_f4/male_thorax_rep1_trimmed.fastq.sam.f4.bam.fasta.length_distribution',
                              'align_to_xBase/flag_f4/male_thorax_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'align_not_xRNA_to_miRNA/flag_f4/male_thorax_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'Male thorax rep1'
)

mt2 = align_distribution_plot('align_to_tracer/flag_f4/male_thorax_rep2_trimmed.fastq.sam.f4.bam.fasta.length_distribution',
                              'align_to_xBase/flag_f4/male_thorax_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'align_not_xRNA_to_miRNA/flag_f4/male_thorax_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'Male thorax rep2'
)

mt3 = align_distribution_plot('align_to_tracer/flag_f4/male_thorax_rep3_trimmed.fastq.sam.f4.bam.fasta.length_distribution',
                              'align_to_xBase/flag_f4/male_thorax_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'align_not_xRNA_to_miRNA/flag_f4/male_thorax_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'Male thorax rep3'
)

fh1 = align_distribution_plot('align_to_tracer/flag_f4/female_head_rep1_trimmed.fastq.sam.f4.bam.fasta.length_distribution',
                                     'align_to_xBase/flag_f4/female_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                                     'align_not_xRNA_to_miRNA/flag_f4/female_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                                     'Female head rep1'
)

fh2 = align_distribution_plot('align_to_tracer/flag_f4/female_head_rep2_trimmed.fastq.sam.f4.bam.fasta.length_distribution',
                              'align_to_xBase/flag_f4/female_head_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'align_not_xRNA_to_miRNA/flag_f4/female_head_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'Female head rep2'
)

fh3 = align_distribution_plot('align_to_tracer/flag_f4/female_head_rep3_trimmed.fastq.sam.f4.bam.fasta.length_distribution',
                              'align_to_xBase/flag_f4/female_head_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'align_not_xRNA_to_miRNA/flag_f4/female_head_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'Female head rep3'
)


ft1 = align_distribution_plot('align_to_tracer/flag_f4/female_thorax_rep1_trimmed.fastq.sam.f4.bam.fasta.length_distribution',
                              'align_to_xBase/flag_f4/female_thorax_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'align_not_xRNA_to_miRNA/flag_f4/female_thorax_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'Female thorax rep1'
)

ft2 = align_distribution_plot('align_to_tracer/flag_f4/female_thorax_rep2_trimmed.fastq.sam.f4.bam.fasta.length_distribution',
                              'align_to_xBase/flag_f4/female_thorax_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'align_not_xRNA_to_miRNA/flag_f4/female_thorax_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'Female thorax rep2'
)

ft3 = align_distribution_plot('align_to_tracer/flag_f4/female_thorax_rep3_trimmed.fastq.sam.f4.bam.fasta.length_distribution',
                              'align_to_xBase/flag_f4/female_thorax_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'align_not_xRNA_to_miRNA/flag_f4/female_thorax_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'Female thorax rep3'
)



library(gridExtra)
gridExtra::grid.arrange(arrangeGrob(mh1, mh2, mh3, mt1, mt2, mt3, fh1, fh2, fh3, ft1, ft2, ft3, ncol = 3),
                        shared_legend,
                        nrow = 2,
                        widths = c(10, 4), heights = c(15, 0.2))


########################################################################################
###miRNA Differential expression:

.unlist <- function (x){
  ## do.call(c, ...) coerces factor to integer, which is undesired
  x1 <- x[[1L]]
  if (is.factor(x1)){
    structure(unlist(x), class = "factor", levels = levels(x1))
  } else {
    do.call(c, x)
  }
}
bam_to_df <- function(path){
  bam <- scanBam(path)
  bam_field <- names(bam[[1]])
  list_bam <- lapply(bam_field, function(y) .unlist(lapply(bam, "[[", y)))
  bam_df <- do.call("DataFrame", list_bam)
  names(bam_df) <- bam_field
  bam_df <- data.frame(bam_df)
  return(bam_df)
}

setwd('~/Anopheles_part5/align_not_xRNA_to_miRNA/F4_flag/')
male_head_1 = bam_to_df('male_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam')
male_head_1_table = as.data.frame(table(male_head_1$rname))

male_head_2 = bam_to_df('male_head_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam')
male_head_2_table = as.data.frame(table(male_head_2$rname))

male_head_3 = bam_to_df('male_head_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam')
male_head_3_table = as.data.frame(table(male_head_3$rname))

male_thorax_1 = bam_to_df('male_thorax_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam')
male_thorax_1_table = as.data.frame(table(male_thorax_1$rname))

male_thorax_2 = bam_to_df('male_thorax_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam')
male_thorax_2_table = as.data.frame(table(male_thorax_2$rname))

male_thorax_3 = bam_to_df('male_thorax_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam')
male_thorax_3_table = as.data.frame(table(male_thorax_3$rname))


male_head_1_table = male_head_1_table[order(male_head_1_table$Var1),]
male_head_2_table = male_head_2_table[order(male_head_2_table$Var1),]
male_head_3_table = male_head_3_table[order(male_head_3_table$Var1),]
male_thorax_1_table = male_thorax_1_table[order(male_thorax_1_table$Var1),]
male_thorax_2_table = male_thorax_2_table[order(male_thorax_2_table$Var1),]
male_thorax_3_table = male_thorax_3_table[order(male_thorax_3_table$Var1),]

summary_man = data.frame(
  male_head_1 = male_head_1_table$Freq,
  male_head_2 = male_head_2_table$Freq,
  male_head_3 = male_head_3_table$Freq,
  male_thorax_1 = male_thorax_1_table$Freq,
  male_thorax_2 = male_thorax_2_table$Freq,
  male_thorax_3 = male_thorax_3_table$Freq
)

rownames(summary_man) = male_head_1_table$Var1
write.table(summary_man, '/mnt/raid/pro_milka/Anopheles_part5/align_not_xRNA_to_miRNA/F4_flag/summary_for_miRNA_DE/man', 
            row.names = TRUE, col.names = TRUE, quote = F)


female_head_1 = bam_to_df('female_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam')
female_head_1_table = as.data.frame(table(female_head_1$rname))

female_head_2 = bam_to_df('female_head_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam')
female_head_2_table = as.data.frame(table(female_head_2$rname))

female_head_3 = bam_to_df('female_head_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam')
female_head_3_table = as.data.frame(table(female_head_3$rname))

female_thorax_1 = bam_to_df('female_thorax_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam')
female_thorax_1_table = as.data.frame(table(female_thorax_1$rname))

female_thorax_2 = bam_to_df('female_thorax_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam')
female_thorax_2_table = as.data.frame(table(female_thorax_2$rname))

female_thorax_3 = bam_to_df('female_thorax_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam')
female_thorax_3_table = as.data.frame(table(female_thorax_3$rname))


female_head_1_table = female_head_1_table[order(female_head_1_table$Var1),]
female_head_2_table = female_head_2_table[order(female_head_2_table$Var1),]
female_head_3_table = female_head_3_table[order(female_head_3_table$Var1),]
female_thorax_1_table = female_thorax_1_table[order(female_thorax_1_table$Var1),]
female_thorax_2_table = female_thorax_2_table[order(female_thorax_2_table$Var1),]
female_thorax_3_table = female_thorax_3_table[order(female_thorax_3_table$Var1),]


summary_all = data.frame(
  female_head_1 = female_head_1_table$Freq,
  female_head_2 = female_head_2_table$Freq,
  female_head_3 = female_head_3_table$Freq,
  female_thorax_1 = female_thorax_1_table$Freq,
  female_thorax_2 = female_thorax_2_table$Freq,
  female_thorax_3 = female_thorax_3_table$Freq
)

rownames(summary_all) = female_head_1_table$Var1
write.table(summary_all, '/mnt/raid/pro_milka/Anopheles_part5/align_not_xRNA_to_miRNA/F4_flag/summary_for_miRNA_DE/female',
            row.names = TRUE, col.names = TRUE, quote = F)



##start 
man = read.table('~/Anopheles_part5/align_not_xRNA_to_miRNA/F4_flag/summary_for_miRNA_DE/man')
girl = read.table('~/Anopheles_part5/align_not_xRNA_to_miRNA/F4_flag/summary_for_miRNA_DE/female')
summary_all = cbind(man, girl)
summary_all$number = rownames(summary_all)

setwd('~/Anopheles_part3/miRNA_base_dir/')
two = as.data.frame(readDNAStringSet('hairpin_aga_database.fasta'))
six = as.data.frame(readDNAStringSet('premiRNA.fasta'))
two$name = rownames(two)
six$name = rownames(six)

base = unique(c(two$x, six$x))
base = DNAStringSet(base)
length(base)
base@ranges@NAMES = as.character(1:183)

base = as.data.frame(base)
base$number = rownames(base)
base$name_two = two[match(base$x, two$x),]$name 
base$name_two = ifelse(is.na(base$name_two), six[match(base$x, six$x),]$name,  base$name_two)
summary_all$Name = base$name_two
rownames(summary_all) = summary_all$Name
summary_all$number = NULL
summary_all$Name = NULL


rownames(summary_all) = unlist(lapply(strsplit(rownames(summary_all), ' '), function(x)x[1]))
colnames(summary_all) = c('mh1', 'mh2', 'mh3', 'mt1', 'mt2', 'mt3',
                            'fh1', 'fh2', 'fh3', 'ft1', 'ft2', 'ft3')


##
featurecounts = summary_all[,c(7:12)]
colData <- data.frame("replicate" = c("R1","R2","R3", "R1","R2","R3"),
                      "treatment" = c("head","head","head", "thorax","thorax","thorax"))

attributes(colData)$row.names <- c("R1.h","R2.h","R3.h", "R1.t","R2.t", "R3.t")

#analyze
colData
dds <- DESeqDataSetFromMatrix(countData = featurecounts, colData = colData, design = ~ replicate + treatment)
dds$treatment <- relevel(dds$treatment, ref = "thorax")
dds$replicate <- relevel(dds$replicate, ref = "R1")

keep50 <- rowSums(counts(dds)) >= 50
dds50 <- dds[keep50,]
dds50 <- DESeq(dds50)
res2 <- results(dds50,contrast=c("treatment","head","thorax"))
res2 <- as.data.frame(res2)

expressed_and_passed <- res2[res2$padj < 0.05,]

expressed_and_passed$names = rownames(expressed_and_passed)
expressed_and_passed$label = ifelse(abs(expressed_and_passed$log2FoldChange) > 2, rownames(expressed_and_passed), NA)

ggplot(data = expressed_and_passed, aes(x = log2FoldChange, y = -log10(pvalue), col = log10(baseMean))) +
  theme_bw() + geom_point() + 
  geom_label_repel(aes(label = expressed_and_passed$label),
                   box.padding   = 0.2, 
                   point.padding = 0.5,
                   segment.color = 'grey50') +
  xlab('log2FC, ref = thorax') +
  ggtitle('Female: ref = thorax, head vs thorax. 82 statistically significant miRNAs')

expressed_and_passed$label = NULL
write.table(expressed_and_passed, '~/Anopheles_part5/align_not_xRNA_to_miRNA/F4_flag/summary_for_miRNA_DE/female_head_vs_thorax.csv', 
            quote = F, row.names = T, col.names = T)


#difference:

male = read.table('~/Anopheles_part5/align_not_xRNA_to_miRNA/F4_flag/summary_for_miRNA_DE/male_head_vs_thorax.csv')
female = read.table('~/Anopheles_part5/align_not_xRNA_to_miRNA/F4_flag/summary_for_miRNA_DE/female_head_vs_thorax.csv')

length(intersect(male[male$log2FoldChange < 0,]$names,
                 female[female$log2FoldChange > 0,]$names))


###head, thorax:

featurecounts = summary_all[,c(4, 5, 6, 10, 11, 12)]
colData <- data.frame("replicate" = c("R1","R2","R3", "R1","R2","R3"),
                      "treatment" = c("male","male","male", "female","female","female"))

attributes(colData)$row.names <- c("R1.m","R2.m","R3.m", "R1.f","R2.f", "R3.f")

#analyze
colData
dds <- DESeqDataSetFromMatrix(countData = featurecounts, colData = colData, design = ~ replicate + treatment)
dds$treatment <- relevel(dds$treatment, ref = "male")
dds$replicate <- relevel(dds$replicate, ref = "R1")

keep50 <- rowSums(counts(dds)) >= 50
dds50 <- dds[keep50,]
dds50 <- DESeq(dds50)
res2 <- results(dds50,contrast=c("treatment","female","male"))
res2 <- as.data.frame(res2)

expressed_and_passed <- res2[res2$padj < 0.05,]

expressed_and_passed$names = rownames(expressed_and_passed)
expressed_and_passed$label = rownames(expressed_and_passed)

ggplot(data = expressed_and_passed, aes(x = log2FoldChange, y = -log10(pvalue), col = log10(baseMean))) +
  theme_bw() + geom_point() + 
  geom_label_repel(aes(label = expressed_and_passed$label),
                   box.padding   = 0.2, 
                   point.padding = 0.5,
                   segment.color = 'grey50') +
  xlab('log2FC, ref = male') +
  ggtitle('Thorax: ref = male, female vs male. 3 statistically significant miRNAs')

expressed_and_passed$label = NULL
write.table(expressed_and_passed, '~/Anopheles_part5/align_not_xRNA_to_miRNA/F4_flag/summary_for_miRNA_DE/thorax.csv', 
            quote = F, row.names = T, col.names = T)



########################miRNA is everywhere, heatmap:

.unlist <- function (x){
  ## do.call(c, ...) coerces factor to integer, which is undesired
  x1 <- x[[1L]]
  if (is.factor(x1)){
    structure(unlist(x), class = "factor", levels = levels(x1))
  } else {
    do.call(c, x)
  }
}
bam_to_df <- function(path){
  bam <- scanBam(path)
  bam_field <- names(bam[[1]])
  list_bam <- lapply(bam_field, function(y) .unlist(lapply(bam, "[[", y)))
  bam_df <- do.call("DataFrame", list_bam)
  names(bam_df) <- bam_field
  bam_df <- data.frame(bam_df)
  return(bam_df)
}

setwd('~/Anopheles_part4/align_not_xRNA_to_miRNA/F4_flag/')

male_head_1 = bam_to_df('male_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam')
male_head_1_table = as.data.frame(table(male_head_1$rname))
male_head_1_table$Freq = male_head_1_table$Freq * 1000000 / nrow(male_head_1)
male_head_1_table = male_head_1_table[order(male_head_1_table$Var1),]

male_head_2 = bam_to_df('male_head_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam')
male_head_2_table = as.data.frame(table(male_head_2$rname))
male_head_2_table$Freq = male_head_2_table$Freq * 1000000 / nrow(male_head_2)
male_head_2_table = male_head_2_table[order(male_head_2_table$Var1),]

male_head_3 = bam_to_df('male_head_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam')
male_head_3_table = as.data.frame(table(male_head_3$rname))
male_head_3_table$Freq = male_head_3_table$Freq * 1000000 / nrow(male_head_3)
male_head_3_table = male_head_3_table[order(male_head_3_table$Var1),]

male_thorax_1 = bam_to_df('male_thorax_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam')
male_thorax_1_table = as.data.frame(table(male_thorax_1$rname))
male_thorax_1_table$Freq = male_thorax_1_table$Freq * 1000000 / nrow(male_thorax_1)
male_thorax_1_table = male_thorax_1_table[order(male_thorax_1_table$Var1),]

male_thorax_2 = bam_to_df('male_thorax_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam')
male_thorax_2_table = as.data.frame(table(male_thorax_2$rname))
male_thorax_2_table$Freq = male_thorax_2_table$Freq * 1000000 / nrow(male_thorax_2)
male_thorax_2_table = male_thorax_2_table[order(male_thorax_2_table$Var1),]

male_thorax_3 = bam_to_df('male_thorax_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam')
male_thorax_3_table = as.data.frame(table(male_thorax_3$rname))
male_thorax_3_table$Freq = male_thorax_3_table$Freq * 1000000 / nrow(male_thorax_3)
male_thorax_3_table = male_thorax_3_table[order(male_thorax_3_table$Var1),]


summary_man = data.frame(
  male_head_1 = male_head_1_table$Freq,
  male_head_2 = male_head_2_table$Freq,
  male_head_3 = male_head_3_table$Freq,
  male_thorax_1 = male_thorax_1_table$Freq,
  male_thorax_2 = male_thorax_2_table$Freq,
  male_thorax_3 = male_thorax_3_table$Freq
)

rownames(summary_man) = male_head_1_table$Var1
write.table(summary_man, '~/Anopheles_part4/pictures/man', row.names = TRUE, col.names = TRUE, quote = F)

df = read.table('~/Anopheles_part4/pictures/man')

##


female_head_1 = bam_to_df('female_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam')
female_head_1_table = as.data.frame(table(female_head_1$rname))
female_head_1_table$Freq = female_head_1_table$Freq * 1000000 / nrow(female_head_1)
female_head_1_table = female_head_1_table[order(female_head_1_table$Var1),]

female_head_2 = bam_to_df('female_head_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam')
female_head_2_table = as.data.frame(table(female_head_2$rname))
female_head_2_table$Freq = female_head_2_table$Freq * 1000000 / nrow(female_head_2)
female_head_2_table = female_head_2_table[order(female_head_2_table$Var1),]

female_head_3 = bam_to_df('female_head_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam')
female_head_3_table = as.data.frame(table(female_head_3$rname))
female_head_3_table$Freq = female_head_3_table$Freq * 1000000 / nrow(female_head_3)
female_head_3_table = female_head_3_table[order(female_head_3_table$Var1),]

female_thorax_1 = bam_to_df('female_thorax_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam')
female_thorax_1_table = as.data.frame(table(female_thorax_1$rname))
female_thorax_1_table$Freq = female_thorax_1_table$Freq * 1000000 / nrow(female_thorax_1)
female_thorax_1_table = female_thorax_1_table[order(female_thorax_1_table$Var1),]

female_thorax_2 = bam_to_df('female_thorax_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam')
female_thorax_2_table = as.data.frame(table(female_thorax_2$rname))
female_thorax_2_table$Freq = female_thorax_2_table$Freq * 1000000 / nrow(female_thorax_2)
female_thorax_2_table = female_thorax_2_table[order(female_thorax_2_table$Var1),]

female_thorax_3 = bam_to_df('female_thorax_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam')
female_thorax_3_table = as.data.frame(table(female_thorax_3$rname))
female_thorax_3_table$Freq = female_thorax_3_table$Freq * 1000000 / nrow(female_thorax_3)
female_thorax_3_table = female_thorax_3_table[order(female_thorax_3_table$Var1),]



#heatmap all TEs, RPM:

summary_all = data.frame(
  female_head_1 = female_head_1_table$Freq,
  female_head_2 = female_head_2_table$Freq,
  female_head_3 = female_head_3_table$Freq,
  female_thorax_1 = female_thorax_1_table$Freq,
  female_thorax_2 = female_thorax_2_table$Freq,
  female_thorax_3 = female_thorax_3_table$Freq
)

rownames(summary_all) = female_head_1_table$Var1
write.table(summary_all, '~/Anopheles_part4/pictures/girl', row.names = TRUE, col.names = TRUE, quote = F)


#miRNA

man = read.table('~/Anopheles_part4/pictures/man')
girl = read.table('~/Anopheles_part4/pictures/girl')
summary_all = cbind(man, girl)
summary_all$number = rownames(summary_all)

setwd('~/Anopheles_part3/miRNA_base_dir/')
two = as.data.frame(readDNAStringSet('hairpin_aga_database.fasta'))
six = as.data.frame(readDNAStringSet('premiRNA.fasta'))
two$name = rownames(two)
six$name = rownames(six)

base = unique(c(two$x, six$x))
base = DNAStringSet(base)
length(base)
base@ranges@NAMES = as.character(1:183)

base = as.data.frame(base)
base$number = rownames(base)
base$name_two = two[match(base$x, two$x),]$name 
base$name_two = ifelse(is.na(base$name_two), six[match(base$x, six$x),]$name,  base$name_two)
summary_all$Name = base$name_two
rownames(summary_all) = summary_all$Name
summary_all$number = NULL
summary_all$Name = NULL

summary_all$max_value = apply(summary_all, 1, max)

#Нарисуем высокоэкспрессные микроРНК: RPM > 1000, это (больше 10000 ридлов для голов, 20000 для тораксов примерно)
save = summary_all

summary_all = summary_all[summary_all$max_value > 1000,]
summary_all$max_value = NULL
#66 high expressed miRNA

pheatmap(log10(summary_all), scale = 'none', main = 'high expressed miRNA, > 1000 RPM, log10(RPM)')

#miRNA with normal expression:


summary_all = save
summary_all$max_value = apply(summary_all, 1, max)
summary_all = summary_all[summary_all$max_value < 1000,]
summary_all = summary_all[summary_all$max_value > 100,]

summary_all$max_value = NULL
pheatmap(log10(summary_all), scale = 'none', main = 'medium expressed miRNA, 100-1000 RPM, log10(RPM)')




summary_all = save
summary_all$max_value = apply(summary_all, 1, max)
summary_all = summary_all[summary_all$max_value < 100,]
summary_all = summary_all[summary_all$max_value > 50,]

summary_all$max_value = NULL
pheatmap(log10(summary_all), scale = 'none', main = 'low expressed miRNA, 100-1000 RPM, log10(RPM)')


########

###########################fuck u off, miRNA:


initial_dist = function(ld_path, name){
  file = read.table(ld_path)
  plot = ggplot(data = file, aes(x = V2, y = V1)) +
    geom_bar(stat = 'identity') + 
    theme_bw() +
    xlab('small RNA length') + 
    ylab('Number of reads') + 
    ggtitle(name) +
    theme(text = element_text(size = 15), legend.position = "none") +
    scale_x_continuous(breaks = c(16, 18, 20, 22, 24, 26, 28, 30, 32, 34))
  
  return(plot)
}
.unlist <- function (x){
  ## do.call(c, ...) coerces factor to integer, which is undesired
  x1 <- x[[1L]]
  if (is.factor(x1)){
    structure(unlist(x), class = "factor", levels = levels(x1))
  } else {
    do.call(c, x)
  }
}
bam_to_df <- function(path){
  bam <- scanBam(path)
  bam_field <- names(bam[[1]])
  list_bam <- lapply(bam_field, function(y) .unlist(lapply(bam, "[[", y)))
  bam_df <- do.call("DataFrame", list_bam)
  names(bam_df) <- bam_field
  bam_df <- data.frame(bam_df)
  return(bam_df)
}


setwd('~/Anopheles_part5/align_not_xRNA_to_miRNA/flag_f4/')

mh1 = initial_dist('male_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                   'Male head rep1')
mh2 = initial_dist('male_head_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                   'Male head rep2')
mh3 = initial_dist('male_head_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                   'Male head rep3')
mt1 = initial_dist('male_thorax_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                   'Male thorax rep1')
mt2 = initial_dist('male_thorax_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                   'Male thorax rep2')
mt3 = initial_dist('male_thorax_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                   'Male thorax rep3')
fh1 = initial_dist('female_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                   'Female head rep1')
fh2 = initial_dist('female_head_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                   'Female head rep2')
fh3 = initial_dist('female_head_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                   'Female head rep3')
ft1 = initial_dist('female_thorax_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                   'Female thorax rep1')
ft2 = initial_dist('female_thorax_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                   'Female thorax rep2')
ft3 = initial_dist('female_thorax_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                   'Female thorax rep3')


gridExtra::grid.arrange(mh1, mh2, mh3, mt1, mt2, mt3, fh1, fh2, fh3, ft1, ft2, ft3,
                        nrow = 4)



###align to genome others rna V0
#xRNA - то что выровнялось па геном c 0 мм

align_distribution_plot = function(initial_dist,
                                   aligned_genome,
                                   gg_title){
  initial = read.table(initial_dist)
  if (nrow(initial) == 19){
    if (identical(initial$V2, c(16:34))){
      initial_upd = initial
    }
    else{
      print('Really?')
    }}
  else{
    initial_upd = data.frame(V2 = c(16:34),
                             V1 = NA)
    initial_upd$V1 = initial[match(initial_upd$V2, initial$V2),]$V1
    initial_upd$V1 = ifelse(is.na(initial_upd$V1), 0, initial_upd$V1)
  }
  
  xRNA = read.table(aligned_genome)
  if (nrow(xRNA) == 19){
    if (identical(xRNA$V2, c(16:34))){
      xRNA_upd = xRNA
    }
    else{
      print('Really?')
    }}
  else{
    xRNA_upd = data.frame(V2 = c(16:34),
                          V1 = NA)
    xRNA_upd$V1 = xRNA[match(xRNA_upd$V2, xRNA$V2),]$V1
    xRNA_upd$V1 = ifelse(is.na(xRNA_upd$V1), 0, xRNA_upd$V1)
  }
  
  df = data.frame(length = rep(initial_upd$V2, 2), 
                  count = c(xRNA_upd$V1,
                    initial_upd$V1 - xRNA_upd$V1),
                  small_RNA_type = c(rep('Aligned', 19), rep('Not', 19)))
  
  normalization_coeff = sum(initial_upd$V1)
  df$count = df$count * 1000000/ normalization_coeff
  
  plot = ggplot(data = df, aes(x = length, y = count, fill = small_RNA_type)) + 
    geom_bar(stat = "identity") + 
    theme_bw() +
    xlab('small RNA length') + 
    ylab('Count, RPM') + 
    ggtitle(gg_title) + 
    theme(text = element_text(size = 15), legend.position = "none") +
    scale_x_continuous(breaks = c(16, 18, 20, 22, 24, 26, 28, 30, 32, 34)) + 
    labs(fill = 'Align to a genome, 3mm:') +
    scale_fill_manual(values = c('Aligned' = "deepskyblue2", 'Not' = "tomato"))
  return(plot)
}

align_distribution_plot_legend = function(initial_dist,
                                          aligned_genome,
                                          gg_title){
  initial = read.table(initial_dist)
  if (nrow(initial) == 19){
    if (identical(initial$V2, c(16:34))){
      initial_upd = initial
    }
    else{
      print('Really?')
    }}
  else{
    initial_upd = data.frame(V2 = c(16:34),
                             V1 = NA)
    initial_upd$V1 = initial[match(initial_upd$V2, initial$V2),]$V1
    initial_upd$V1 = ifelse(is.na(initial_upd$V1), 0, initial_upd$V1)
  }
  
  xRNA = read.table(aligned_genome)
  if (nrow(xRNA) == 19){
    if (identical(xRNA$V2, c(16:34))){
      xRNA_upd = xRNA
    }
    else{
      print('Really?')
    }}
  else{
    xRNA_upd = data.frame(V2 = c(16:34),
                          V1 = NA)
    xRNA_upd$V1 = xRNA[match(xRNA_upd$V2, xRNA$V2),]$V1
    xRNA_upd$V1 = ifelse(is.na(xRNA_upd$V1), 0, xRNA_upd$V1)
  }
  
  df = data.frame(length = rep(initial_upd$V2, 2), 
                  count = c(xRNA_upd$V1,
                            initial_upd$V1 - xRNA_upd$V1),
                  small_RNA_type = c(rep('Aligned', 19), rep('Not', 19)))
  
  normalization_coeff = sum(initial_upd$V1)
  df$count = df$count * 1000000/ normalization_coeff
  
  plot = ggplot(data = df, aes(x = length, y = count, fill = small_RNA_type)) + 
    geom_bar(stat = "identity") + 
    theme_bw() +
    xlab('small RNA length') + 
    ylab('Count, RPM') + 
    ggtitle(gg_title) + 
    theme(text = element_text(size = 15), legend.position = "top", legend.direction = "vertical") +
    scale_x_continuous(breaks = c(16, 18, 20, 22, 24, 26, 28, 30, 32, 34)) + 
    labs(fill = 'Align to a genome, 3mm:') +
    scale_fill_manual(values = c('Aligned' = "deepskyblue2", 'Not' = "tomato"))
  return(plot)
}

extract_legend <- function(my_ggp) {
  step1 <- ggplot_gtable(ggplot_build(my_ggp))
  step2 <- which(sapply(step1$grobs, function(x) x$name) == "guide-box")
  step3 <- step1$grobs[[step2]]
  return(step3)
}

setwd('~/Anopheles_part5/')

legend = align_distribution_plot_legend('OTHER_SNRNAs/male_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                                        'al_to_genome_v0/F4_flag/male_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.length_distribution',
                                        'Male head rep1'
)


shared_legend <- extract_legend(legend)


mh1 = align_distribution_plot_legend('OTHER_SNRNAs/male_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'al_to_genome_v0/F4_flag/male_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.length_distribution',
                              'Male head rep1'
)

mh1


mh2 = align_distribution_plot('align_not_xRNA_to_miRNA/flag_f4/male_head_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'align_others_sRNA_to_GENOME_ACOL_V3/flag_f4/male_head_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'Male head rep2'
)

mh3 = align_distribution_plot('align_not_xRNA_to_miRNA/flag_f4/male_head_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'align_others_sRNA_to_GENOME_ACOL_V3/flag_f4/male_head_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'Male head rep3'
)

mt1 = align_distribution_plot('align_not_xRNA_to_miRNA/flag_f4/male_thorax_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'align_others_sRNA_to_GENOME_ACOL_V3/flag_f4/male_thorax_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'Male thorax rep1'
)

mt2 = align_distribution_plot('align_not_xRNA_to_miRNA/flag_f4/male_thorax_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'align_others_sRNA_to_GENOME_ACOL_V3/flag_f4/male_thorax_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'Male thorax rep2'
)

mt3 = align_distribution_plot('align_not_xRNA_to_miRNA/flag_f4/male_thorax_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'align_others_sRNA_to_GENOME_ACOL_V3/flag_f4/male_thorax_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'Male thorax rep3'
)


fh1 = align_distribution_plot('align_not_xRNA_to_miRNA/flag_f4/female_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'align_others_sRNA_to_GENOME_ACOL_V3/flag_f4/female_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'Female head rep1'
)

fh2 = align_distribution_plot('align_not_xRNA_to_miRNA/flag_f4/female_head_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'align_others_sRNA_to_GENOME_ACOL_V3/flag_f4/female_head_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'Female head rep2'
)

fh3 = align_distribution_plot('align_not_xRNA_to_miRNA/flag_f4/female_head_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'align_others_sRNA_to_GENOME_ACOL_V3/flag_f4/female_head_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'Female head rep3'
)

ft1 = align_distribution_plot('align_not_xRNA_to_miRNA/flag_f4/female_thorax_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'align_others_sRNA_to_GENOME_ACOL_V3/flag_f4/female_thorax_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'Female thorax rep1'
)

ft2 = align_distribution_plot('align_not_xRNA_to_miRNA/flag_f4/female_thorax_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'align_others_sRNA_to_GENOME_ACOL_V3/flag_f4/female_thorax_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'Female thorax rep2'
)

ft3 = align_distribution_plot('align_not_xRNA_to_miRNA/flag_f4/female_thorax_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'align_others_sRNA_to_GENOME_ACOL_V3/flag_f4/female_thorax_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.length_distribution',
                              'Female thorax rep3'
)


library(gridExtra)
gridExtra::grid.arrange(arrangeGrob(mh1, mh2, mh3, mt1, mt2, mt3, fh1, fh2, fh3, ft1, ft2, ft3, ncol = 3),
                        shared_legend,
                        nrow = 2,
                        widths = c(10, 4), heights = c(15, 0.2))





#Кто такой опять не выравнивается?


.unlist <- function (x){
  ## do.call(c, ...) coerces factor to integer, which is undesired
  x1 <- x[[1L]]
  if (is.factor(x1)){
    structure(unlist(x), class = "factor", levels = levels(x1))
  } else {
    do.call(c, x)
  }
}
bam_to_df <- function(path){
  bam <- scanBam(path)
  bam_field <- names(bam[[1]])
  list_bam <- lapply(bam_field, function(y) .unlist(lapply(bam, "[[", y)))
  bam_df <- do.call("DataFrame", list_bam)
  names(bam_df) <- bam_field
  bam_df <- data.frame(bam_df)
  return(bam_df)
}


setwd('/mnt/raid/pro_milka/Anopheles_part5/al_to_genome_v0/flag_f4')

mh1 = bam_to_df('female_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam')
View(as.data.frame(table(mh1$seq)))



mh1$seq_letter = strsplit(mh1$seq, '')
table(lapply(mh1$seq_letter == 'N', sum))


mh1$seq_letter = 'N' %in% unlist(strsplit(mh1$seq, ''))
mh1$N = ifelse(
  lapply(unlist(mh1$seq_letter %in% 'N'), sum) == 0,
'No N', 'N'
)





#########################################################################################
#align to genome -v 0, intersect with masker and annotation, check length:

setwd('/mnt/raid/pro_milka/Anopheles_part5/al_to_genome_v0/F4_flag')

.unlist <- function (x){
  ## do.call(c, ...) coerces factor to integer, which is undesired
  x1 <- x[[1L]]
  if (is.factor(x1)){
    structure(unlist(x), class = "factor", levels = levels(x1))
  } else {
    do.call(c, x)
  }
}
bam_to_df <- function(path){
  bam <- scanBam(path)
  bam_field <- names(bam[[1]])
  list_bam <- lapply(bam_field, function(y) .unlist(lapply(bam, "[[", y)))
  bam_df <- do.call("DataFrame", list_bam)
  names(bam_df) <- bam_field
  bam_df <- data.frame(bam_df)
  return(bam_df)
}

#lncRNA
lnc = read.table('~/Anopheles_part5/lncRNA_masker/AcolMOP1_genome.fasta.ori.out', fill = T)
lnc = lnc[c(3:219831),]
lnc = na.omit(lnc)
lnc$V9 = ifelse(as.character(lnc$V9) == '+', '+', '-')

RM_lnc = GRanges(seqnames = as.character(lnc$V5), ranges = IRanges(start = as.numeric(as.character(lnc$V6)), 
                                                                   end = as.numeric(as.character(lnc$V7))),
                 strand = lnc$V9,
                 name = lnc$V10)

#masker

masker = read.table('~/Anopheles_part5/RepeatMasker/AcolMOP1_genome.fasta.out', fill = T)
masker = masker[c(3:136647),]
masker = na.omit(masker)
masker$V9 = ifelse(as.character(masker$V9) == '+', '+', '-')

TE_base = readDNAStringSet('~/Anopheles/reference/TE_base/TE_library_josefa.fasta')
TEs = data.frame(name = unlist(lapply(strsplit(TE_base@ranges@NAMES, '#'), function(x)x[1])),
                 width = TE_base@ranges@width)

masker$TE_length = TEs[match(masker$V10, TEs$name),]$width
masker$percent = (as.numeric(as.character(masker$V7)) - as.numeric(as.character(masker$V6)))/masker$TE_length

RM = GRanges(seqnames = as.character(masker$V5), ranges = IRanges(start = as.numeric(as.character(masker$V6)), 
                                                                  end = as.numeric(as.character(masker$V7))),
             strand = masker$V9,
             TE_len = masker$TE_length,
             percent = masker$percent,
             TE = masker$V10,
             class = masker$V11)

#genes
annotation = rtracklayer::import('~/Anopheles_part5/Acol_genome/AcolMOP1_annotation.gtf')
annotation = annotation[annotation$type == 'exon']


#files
files = c('male_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.fasta.sam.F4.bam',
          'male_head_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.fasta.sam.F4.bam',
          'male_head_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.fasta.sam.F4.bam',
          'male_thorax_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.fasta.sam.F4.bam',
          'male_thorax_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.fasta.sam.F4.bam',
          'male_thorax_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.fasta.sam.F4.bam',
          'female_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.fasta.sam.F4.bam',
          'female_head_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.fasta.sam.F4.bam',
          'female_head_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.fasta.sam.F4.bam',
          'female_thorax_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.fasta.sam.F4.bam',
          'female_thorax_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.fasta.sam.F4.bam',
          'female_thorax_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.fasta.sam.F4.bam'
          )


for (i in files){
  mh1 = bam_to_df(i)
  mh1_GR = GRanges(seqnames = mh1$rname, ranges = IRanges(start = mh1$pos, width = mh1$qwidth), strand = mh1$strand)
  print(i)
  print(paste('Выровняшихся ридов на геном из библиотеки', length(mh1_GR)))
  print(paste('На lncRNAs:', length(subsetByOverlaps(mh1_GR, RM_lnc, ignore.strand = TRUE))/length(mh1_GR) ))
  print(paste('На TE:', length(subsetByOverlaps(mh1_GR, RM, ignore.strand = TRUE))/length(mh1_GR) ))
  print(paste('На гены:', length(subsetByOverlaps(mh1_GR, annotation, ignore.strand = TRUE))/length(mh1_GR) ))
  
  
}


View(as.data.frame(annotation))

plotcoverage_upd = function(TE_name, TE_library_path, bam_path){
  .unlist <- function (x){
    ## do.call(c, ...) coerces factor to integer, which is undesired
    x1 <- x[[1L]]
    if (is.factor(x1)){
      structure(unlist(x), class = "factor", levels = levels(x1))
    } else {
      do.call(c, x)
    }
  }
  bam_to_df <- function(path){
    bam <- scanBam(path)
    bam_field <- names(bam[[1]])
    list_bam <- lapply(bam_field, function(y) .unlist(lapply(bam, "[[", y)))
    bam_df <- do.call("DataFrame", list_bam)
    names(bam_df) <- bam_field
    bam_df <- data.frame(bam_df)
    return(bam_df)
  }
  TE_library = readDNAStringSet(TE_library_path)
  TE_length = TE_library[TE_library@ranges@NAMES == TE_name,]@ranges@width
  TE_coverage = data.frame(position = c(1:TE_length), sense = 0, antisense = 0)
  intervals = bam_to_df(bam_path)
  print('Bam file successfully downloaded. Number of hits at all:')
  print(nrow(intervals))
  intervals = intervals[intervals$rname == TE_name,]
  print('Bam file successfully downloaded. Number of hits:')
  print(nrow(intervals))
  if (nrow(intervals) == 0){
    plot = ggplot()
    return(plot)
  }
  
  for (i in 1:nrow(intervals)){
    if (intervals$strand[i] == '+'){
      TE_coverage$sense[c(intervals$pos[i]:intervals$pos[i]+intervals$qwidth[i]-1)] =
        TE_coverage$sense[c(intervals$pos[i]:intervals$pos[i]+intervals$qwidth[i]-1)] + 1
    }
    else {
      TE_coverage$antisense[c(intervals$pos[i]:intervals$pos[i]+intervals$qwidth[i]-1)] =
        TE_coverage$antisense[c(intervals$pos[i]:intervals$pos[i]+intervals$qwidth[i]-1)] + 1
    }
    if ((i %% 1000) == 0){
      print(paste(100*i/nrow(intervals), 'percent done'))
    }
  }
  
  TE_coverage_melted = data.frame(position = rep(TE_coverage$position, 2), reads = c(TE_coverage$sense,
                                                                                     TE_coverage$antisense),
                                  label = c(rep('sense', nrow(TE_coverage)),
                                            rep('antisense', nrow(TE_coverage))))
  TE_coverage_melted$reads = TE_coverage_melted$reads * 1000000 / nrow(intervals)
  TE_coverage_melted$reads[TE_coverage_melted$label == 'antisense'] = -1 * TE_coverage_melted$reads[TE_coverage_melted$label == 'antisense']
  
  plot = ggplot(data = TE_coverage_melted, aes(x = position, y= reads, col = label)) + 
    geom_line() + 
    theme_classic() + 
    scale_color_manual(values = c("deepskyblue2", "tomato")) +
    ggtitle(TE_name) +
    xlab('Genomic coordinate') +
    ylab('Scaled coverage, RPM') +
    labs(col = 'Strand:')
  return(plot)
}
plot_signature = function(TE_name, TE_library_path, fasta_path){
  setwd('/mnt/raid/pro_milka/Anopheles_part3/COMPARE_ME/align_to_TE_V0/F4_flag/ALL_THIS_STUFF/')
  base = readDNAStringSet(TE_library_path)
  TE = base[base@ranges@NAMES == TE_name]
  writeXStringSet(TE, '/mnt/raid/pro_milka/Anopheles_part3/COMPARE_ME/align_to_TE_V0/F4_flag/ALL_THIS_STUFF/TE.fasta')
  system(paste('bowtie-build /mnt/raid/pro_milka/Anopheles_part3/COMPARE_ME/align_to_TE_V0/F4_flag/ALL_THIS_STUFF/TE.fasta TE;
         bowtie -f ', fasta_path, ' -v 0 --threads 64 --index /mnt/raid/pro_milka/Anopheles_part3/COMPARE_ME/align_to_TE_V0/F4_flag/ALL_THIS_STUFF/TE --sam > /mnt/raid/pro_milka/Anopheles_part3/COMPARE_ME/align_to_TE_V0/F4_flag/ALL_THIS_STUFF/align_without_flag.sam;
         samtools view -h -F 4 /mnt/raid/pro_milka/Anopheles_part3/COMPARE_ME/align_to_TE_V0/F4_flag/ALL_THIS_STUFF/align_without_flag.sam > /mnt/raid/pro_milka/Anopheles_part3/COMPARE_ME/align_to_TE_V0/F4_flag/ALL_THIS_STUFF/result.sam;
         python3 ~/soft/signature.py /mnt/raid/pro_milka/Anopheles_part3/COMPARE_ME/align_to_TE_V0/F4_flag/ALL_THIS_STUFF/result.sam 1 35 1 35 answer', sep =''), intern = F)
  df = read.table('answer', header = TRUE)
  system('rm /mnt/raid/pro_milka/Anopheles_part3/COMPARE_ME/align_to_TE_V0/F4_flag/ALL_THIS_STUFF/*', intern = F)
  plot = ggplot(data = df, aes(x = overlap, y = z.score, fill = overlap_prob)) +
    theme_classic() +
    geom_bar(stat = 'identity') +
    xlab('Overlap') +
    ylab('Z-score') +
    theme(text = element_text(size = 15), legend.position = "none")
  return(plot)
}
#the same bam as in plot coverage
plot_bias = function(TE_name, bam_path){
  bam_to_df <- function(path){
    bam <- scanBam(path)
    bam_field <- names(bam[[1]])
    list_bam <- lapply(bam_field, function(y) .unlist(lapply(bam, "[[", y)))
    bam_df <- do.call("DataFrame", list_bam)
    names(bam_df) <- bam_field
    bam_df <- data.frame(bam_df)
    return(bam_df)
  }
  
  take_ten = function(DNAstring){
    rez = paste(unlist(strsplit(as.character(DNAstring),''))[1:10],collapse="")
    return(rez) 
  }
  
  intervals = bam_to_df(bam_path)
  print('Bam file successfully downloaded. Number of hits at all:')
  print(nrow(intervals))
  intervals = intervals[intervals$rname == TE_name,]
  print('Bam file successfully downloaded. Number of hits:')
  print(nrow(intervals))
  if (nrow(intervals) == 0){
    plot = ggplot()
    return(plot)
  }
  intervals_plus = intervals[intervals$strand == '+',]
  intervals_minus = intervals[intervals$strand == '-',]
  
  if (nrow(intervals_plus) == 0){
    plus = ggplot() + theme_void()
  } else{
    
    intervals_plus$ten_letters = as.character(lapply(intervals_plus$seq, take_ten))
    plus = ggplot() + geom_logo(intervals_plus$ten_letters) + theme_logo() + ggtitle('+ strand')
  }
  
  if (nrow(intervals_minus) == 0){
    minus = ggplot() + theme_void()
  }
  else{
    intervals_minus$ten_letters = as.character(lapply(intervals_minus$seq, take_ten))
    minus = ggplot() + geom_logo(intervals_minus$ten_letters) + theme_logo() + ggtitle('- strand')
  }
  
  result = grid.arrange(plus, minus, nrow = 2)
  return(result)
}


mh1 = bam_to_df('~/Anopheles_part5/align_length_24_32_filtered_to_transcripts_gambie/F4_flag/male_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.fasta.sam.F4.bam')
transcript = as.data.frame(table(mh1$rname))
transcript = transcript[transcript$Freq > 500,]

for (i in transcript$Var1){
  print(i)
#  coverage = plotcoverage_upd(i, '~/Anopheles_part4/mRNA_Agambie.fasta',
#                              '~/Anopheles_part5/align_length_24_32_filtered_to_transcripts_gambie/F4_flag/male_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.fasta.sam.F4.bam')#
#  signature = plot_signature(i, '~/Anopheles_part4/mRNA_Agambie.fasta',
#                             '~/Anopheles_part5/align_length_24_32_filtered_to_transcripts_gambie/F4_flag/male_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.fasta.sam.F4.bam.fasta')
#  bias = plot_bias(i, '~/Anopheles_part5/align_length_24_32_filtered_to_transcripts_gambie/F4_flag/male_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.fasta.sam.F4.bam')
  
  
#  l = grid.arrange(coverage, signature, bias, nrow = 1)
#  setwd('mnt/raid/pro_milka/Anopheles_part5/align_length_24_32_filtered_to_transcripts_gambie')
#  ggsave(paste(i,'.pdf'), width = 25, height = 7, units = "cm", l)
#  l
  
}

plotcoverage_upd('AGAP003387-RA',
                 '~/Anopheles_part4/mRNA_Agambie.fasta',
                '~/Anopheles_part5/align_length_24_32_filtered_to_transcripts_gambie/F4_flag/male_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.fasta.sam.F4.bam'
                 )


hey = bam_to_df('~/Anopheles_part5/align_length_24_32_filtered_to_transcripts_gambie/F4_flag/male_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.fasta.sam.F4.bam')
hey = hey[hey$rname == 'AGAP003387-RA',]
View(as.data.frame(table(hey$seq)))




#Какие взять транспозоны?

setwd('~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/')

.unlist <- function (x){
  ## do.call(c, ...) coerces factor to integer, which is undesired
  x1 <- x[[1L]]
  if (is.factor(x1)){
    structure(unlist(x), class = "factor", levels = levels(x1))
  } else {
    do.call(c, x)
  }
}
bam_to_df <- function(path){
  bam <- scanBam(path)
  bam_field <- names(bam[[1]])
  list_bam <- lapply(bam_field, function(y) .unlist(lapply(bam, "[[", y)))
  bam_df <- do.call("DataFrame", list_bam)
  names(bam_df) <- bam_field
  bam_df <- data.frame(bam_df)
  return(bam_df)
}

male_head_1 = bam_to_df('male_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
male_head_1_table = as.data.frame(table(male_head_1$rname))
male_head_1_table$Freq = male_head_1_table$Freq * 1000000 / nrow(male_head_1)
male_head_1_table = male_head_1_table[order(male_head_1_table$Var1),]

male_head_2 = bam_to_df('male_head_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
male_head_2_table = as.data.frame(table(male_head_2$rname))
male_head_2_table$Freq = male_head_2_table$Freq * 1000000 / nrow(male_head_2)
male_head_2_table = male_head_2_table[order(male_head_2_table$Var1),]

male_head_3 = bam_to_df('male_head_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
male_head_3_table = as.data.frame(table(male_head_3$rname))
male_head_3_table$Freq = male_head_3_table$Freq * 1000000 / nrow(male_head_3)
male_head_3_table = male_head_3_table[order(male_head_3_table$Var1),]

male_thorax_1 = bam_to_df('male_thorax_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
male_thorax_1_table = as.data.frame(table(male_thorax_1$rname))
male_thorax_1_table$Freq = male_thorax_1_table$Freq * 1000000 / nrow(male_thorax_1)
male_thorax_1_table = male_thorax_1_table[order(male_thorax_1_table$Var1),]

male_thorax_2 = bam_to_df('male_thorax_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
male_thorax_2_table = as.data.frame(table(male_thorax_2$rname))
male_thorax_2_table$Freq = male_thorax_2_table$Freq * 1000000 / nrow(male_thorax_2)
male_thorax_2_table = male_thorax_2_table[order(male_thorax_2_table$Var1),]

male_thorax_3 = bam_to_df('male_thorax_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
male_thorax_3_table = as.data.frame(table(male_thorax_3$rname))
male_thorax_3_table$Freq = male_thorax_3_table$Freq * 1000000 / nrow(male_thorax_3)
male_thorax_3_table = male_thorax_3_table[order(male_thorax_3_table$Var1),]

female_head_1 = bam_to_df('female_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
female_head_1_table = as.data.frame(table(female_head_1$rname))
female_head_1_table$Freq = female_head_1_table$Freq * 1000000 / nrow(female_head_1)
female_head_1_table = female_head_1_table[order(female_head_1_table$Var1),]

female_head_2 = bam_to_df('female_head_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
female_head_2_table = as.data.frame(table(female_head_2$rname))
female_head_2_table$Freq = female_head_2_table$Freq * 1000000 / nrow(female_head_2)
female_head_2_table = female_head_2_table[order(female_head_2_table$Var1),]

female_head_3 = bam_to_df('female_head_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
female_head_3_table = as.data.frame(table(female_head_3$rname))
female_head_3_table$Freq = female_head_3_table$Freq * 1000000 / nrow(female_head_3)
female_head_3_table = female_head_3_table[order(female_head_3_table$Var1),]

female_thorax_1 = bam_to_df('female_thorax_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
female_thorax_1_table = as.data.frame(table(female_thorax_1$rname))
female_thorax_1_table$Freq = female_thorax_1_table$Freq * 1000000 / nrow(female_thorax_1)
female_thorax_1_table = female_thorax_1_table[order(female_thorax_1_table$Var1),]

female_thorax_2 = bam_to_df('female_thorax_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
female_thorax_2_table = as.data.frame(table(female_thorax_2$rname))
female_thorax_2_table$Freq = female_thorax_2_table$Freq * 1000000 / nrow(female_thorax_2)
female_thorax_2_table = female_thorax_2_table[order(female_thorax_2_table$Var1),]

female_thorax_3 = bam_to_df('female_thorax_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
female_thorax_3_table = as.data.frame(table(female_thorax_3$rname))
female_thorax_3_table$Freq = female_thorax_3_table$Freq * 1000000 / nrow(female_thorax_3)
female_thorax_3_table = female_thorax_3_table[order(female_thorax_3_table$Var1),]


#heatmap all TEs, RPM:

summary_all = data.frame(
  male_head_1 = male_head_1_table$Freq,
  male_head_2 = male_head_2_table$Freq,
  male_head_3 = male_head_3_table$Freq,
  female_head_1 = female_head_1_table$Freq,
  female_head_2 = female_head_2_table$Freq,
  female_head_3 = female_head_3_table$Freq,
  male_thorax_1 = male_thorax_1_table$Freq,
  male_thorax_2 = male_thorax_2_table$Freq,
  male_thorax_3 = male_thorax_3_table$Freq,
  female_thorax_1 = female_thorax_1_table$Freq,
  female_thorax_2 = female_thorax_2_table$Freq,
  female_thorax_3 = female_thorax_3_table$Freq
)

rownames(summary_all) = male_head_1_table$Var1

summary_all$max_value = apply(summary_all, 1, max)
summary_all = summary_all[summary_all$max_value > 10000,]
summary_all$max_value = NULL

pheatmap(log2(summary_all), scale = 'none')

TE_names = rownames(summary_all)



##############################################


plotcoverage_upd = function(TE_name, TE_library_path, bam_path){
  .unlist <- function (x){
    ## do.call(c, ...) coerces factor to integer, which is undesired
    x1 <- x[[1L]]
    if (is.factor(x1)){
      structure(unlist(x), class = "factor", levels = levels(x1))
    } else {
      do.call(c, x)
    }
  }
  bam_to_df <- function(path){
    bam <- scanBam(path)
    bam_field <- names(bam[[1]])
    list_bam <- lapply(bam_field, function(y) .unlist(lapply(bam, "[[", y)))
    bam_df <- do.call("DataFrame", list_bam)
    names(bam_df) <- bam_field
    bam_df <- data.frame(bam_df)
    return(bam_df)
  }
  TE_library = readDNAStringSet(TE_library_path)
  TE_length = TE_library[TE_library@ranges@NAMES == TE_name,]@ranges@width
  TE_coverage = data.frame(position = c(1:TE_length), sense = 0, antisense = 0)
  intervals = bam_to_df(bam_path)
  print('Bam file successfully downloaded. Number of hits at all:')
  print(nrow(intervals))
  intervals = intervals[intervals$rname == TE_name,]
  print('Bam file successfully downloaded. Number of hits:')
  print(nrow(intervals))
  if (nrow(intervals) == 0){
    plot = ggplot()
    return(plot)
  }
  
  for (i in 1:nrow(intervals)){
    if (intervals$strand[i] == '+'){
      TE_coverage$sense[c(intervals$pos[i]:intervals$pos[i]+intervals$qwidth[i]-1)] =
        TE_coverage$sense[c(intervals$pos[i]:intervals$pos[i]+intervals$qwidth[i]-1)] + 1
    }
    else {
      TE_coverage$antisense[c(intervals$pos[i]:intervals$pos[i]+intervals$qwidth[i]-1)] =
        TE_coverage$antisense[c(intervals$pos[i]:intervals$pos[i]+intervals$qwidth[i]-1)] + 1
    }
    if ((i %% 1000) == 0){
      print(paste(100*i/nrow(intervals), 'percent done'))
    }
  }
  
  TE_coverage_melted = data.frame(position = rep(TE_coverage$position, 2), reads = c(TE_coverage$sense,
                                                                                     TE_coverage$antisense),
                                  label = c(rep('sense', nrow(TE_coverage)),
                                            rep('antisense', nrow(TE_coverage))))
  TE_coverage_melted$reads = TE_coverage_melted$reads * 1000000 / nrow(intervals)
  TE_coverage_melted$reads[TE_coverage_melted$label == 'antisense'] = -1 * TE_coverage_melted$reads[TE_coverage_melted$label == 'antisense']
  
  plot = ggplot(data = TE_coverage_melted, aes(x = position, y= reads, col = label)) + 
    geom_line() + 
    theme_classic() + 
    scale_color_manual(values = c("deepskyblue2", "tomato")) +
    ggtitle(TE_name) +
    xlab('Genomic coordinate') +
    ylab('Scaled coverage, RPM') +
    labs(col = 'Strand:')
  return(plot)
}
plot_signature = function(TE_name, TE_library_path, fasta_path){
  setwd('/mnt/raid/pro_milka/Anopheles_part3/COMPARE_ME/align_to_TE_V0/F4_flag/ALL_THIS_STUFF/')
  base = readDNAStringSet(TE_library_path)
  TE = base[base@ranges@NAMES == TE_name]
  writeXStringSet(TE, '/mnt/raid/pro_milka/Anopheles_part3/COMPARE_ME/align_to_TE_V0/F4_flag/ALL_THIS_STUFF/TE.fasta')
  system(paste('bowtie-build /mnt/raid/pro_milka/Anopheles_part3/COMPARE_ME/align_to_TE_V0/F4_flag/ALL_THIS_STUFF/TE.fasta TE;
         bowtie -f ', fasta_path, ' -v 0 --threads 64 --index /mnt/raid/pro_milka/Anopheles_part3/COMPARE_ME/align_to_TE_V0/F4_flag/ALL_THIS_STUFF/TE --sam > /mnt/raid/pro_milka/Anopheles_part3/COMPARE_ME/align_to_TE_V0/F4_flag/ALL_THIS_STUFF/align_without_flag.sam;
         samtools view -h -F 4 /mnt/raid/pro_milka/Anopheles_part3/COMPARE_ME/align_to_TE_V0/F4_flag/ALL_THIS_STUFF/align_without_flag.sam > /mnt/raid/pro_milka/Anopheles_part3/COMPARE_ME/align_to_TE_V0/F4_flag/ALL_THIS_STUFF/result.sam;
         python3 ~/soft/signature.py /mnt/raid/pro_milka/Anopheles_part3/COMPARE_ME/align_to_TE_V0/F4_flag/ALL_THIS_STUFF/result.sam 1 35 1 35 answer', sep =''), intern = F)
  df = read.table('answer', header = TRUE)
  system('rm /mnt/raid/pro_milka/Anopheles_part3/COMPARE_ME/align_to_TE_V0/F4_flag/ALL_THIS_STUFF/*', intern = F)
  plot = ggplot(data = df, aes(x = overlap, y = z.score, fill = overlap_prob)) +
    theme_classic() +
    geom_bar(stat = 'identity') +
    xlab('Overlap') +
    ylab('Z-score') +
    theme(text = element_text(size = 15), legend.position = "none")
  return(plot)
}
#the same bam as in plot coverage
plot_bias = function(TE_name, bam_path){
  bam_to_df <- function(path){
    bam <- scanBam(path)
    bam_field <- names(bam[[1]])
    list_bam <- lapply(bam_field, function(y) .unlist(lapply(bam, "[[", y)))
    bam_df <- do.call("DataFrame", list_bam)
    names(bam_df) <- bam_field
    bam_df <- data.frame(bam_df)
    return(bam_df)
  }
  
  take_ten = function(DNAstring){
    rez = paste(unlist(strsplit(as.character(DNAstring),''))[1:10],collapse="")
    return(rez) 
  }
  
  intervals = bam_to_df(bam_path)
  print('Bam file successfully downloaded. Number of hits at all:')
  print(nrow(intervals))
  intervals = intervals[intervals$rname == TE_name,]
  print('Bam file successfully downloaded. Number of hits:')
  print(nrow(intervals))
  if (nrow(intervals) == 0){
    plot = ggplot()
    return(plot)
  }
  intervals_plus = intervals[intervals$strand == '+',]
  intervals_minus = intervals[intervals$strand == '-',]
  
  if (nrow(intervals_plus) == 0){
    plus = ggplot() + theme_void()
  } else{
    
    intervals_plus$ten_letters = as.character(lapply(intervals_plus$seq, take_ten))
    plus = ggplot() + geom_logo(intervals_plus$ten_letters) + theme_logo() + ggtitle('+ strand')
  }
  
  if (nrow(intervals_minus) == 0){
    minus = ggplot() + theme_void()
  }
  else{
    intervals_minus$ten_letters = as.character(lapply(intervals_minus$seq, take_ten))
    minus = ggplot() + geom_logo(intervals_minus$ten_letters) + theme_logo() + ggtitle('- strand')
  }
  
  result = grid.arrange(plus, minus, nrow = 2)
  return(result)
}


for (i in 1:length(TE_names)){
  
  coverage = plotcoverage_upd(TE_names[i],'~/Anopheles_part3/TE_Josefa/TE_library_josefa.fasta',
                              '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/female_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
  signature = plot_signature(TE_names[i], '~/Anopheles_part3/TE_Josefa/TE_library_josefa.fasta',
                             '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/female_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam.fasta')
  bias = plot_bias(TE_names[i], 
                   '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/female_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
  
  fh1 = arrangeGrob(coverage, signature, bias, nrow = 1, top = 'Female head 1')
  
  #
  
  coverage = plotcoverage_upd(TE_names[i],'~/Anopheles_part3/TE_Josefa/TE_library_josefa.fasta',
                              '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/female_head_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
  signature = plot_signature(TE_names[i], '~/Anopheles_part3/TE_Josefa/TE_library_josefa.fasta',
                             '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/female_head_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam.fasta')
  bias = plot_bias(TE_names[i], 
                   '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/female_head_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
  
  fh2 = arrangeGrob(coverage, signature, bias, nrow = 1, top = 'Female head 2')
  #
  
  
  coverage = plotcoverage_upd(TE_names[i],'~/Anopheles_part3/TE_Josefa/TE_library_josefa.fasta',
                              '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/female_head_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
  signature = plot_signature(TE_names[i], '~/Anopheles_part3/TE_Josefa/TE_library_josefa.fasta',
                             '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/female_head_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam.fasta')
  bias = plot_bias(TE_names[i], 
                   '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/female_head_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
  
  fh3 = arrangeGrob(coverage, signature, bias, nrow = 1, top = 'Female head 3')
  
  #
  
  coverage = plotcoverage_upd(TE_names[i],'~/Anopheles_part3/TE_Josefa/TE_library_josefa.fasta',
                              '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/female_thorax_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
  signature = plot_signature(TE_names[i], '~/Anopheles_part3/TE_Josefa/TE_library_josefa.fasta',
                             '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/female_thorax_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam.fasta')
  bias = plot_bias(TE_names[i], 
                   '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/female_thorax_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
  
  ft1 = arrangeGrob(coverage, signature, bias, nrow = 1, top = 'Female thorax 1')
  
  #
  
  coverage = plotcoverage_upd(TE_names[i],'~/Anopheles_part3/TE_Josefa/TE_library_josefa.fasta',
                              '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/female_thorax_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
  signature = plot_signature(TE_names[i], '~/Anopheles_part3/TE_Josefa/TE_library_josefa.fasta',
                             '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/female_thorax_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam.fasta')
  bias = plot_bias(TE_names[i], 
                   '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/female_thorax_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
  
  ft2 = arrangeGrob(coverage, signature, bias, nrow = 1, top = 'Female thorax 2')
  #
  
  coverage = plotcoverage_upd(TE_names[i],'~/Anopheles_part3/TE_Josefa/TE_library_josefa.fasta',
                              '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/female_thorax_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
  signature = plot_signature(TE_names[i], '~/Anopheles_part3/TE_Josefa/TE_library_josefa.fasta',
                             '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/female_thorax_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam.fasta')
  bias = plot_bias(TE_names[i], 
                   '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/female_thorax_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
  
  ft3 = arrangeGrob(coverage, signature, bias, nrow = 1, top = 'Female thorax 3')
  #
  
  coverage = plotcoverage_upd(TE_names[i],'~/Anopheles_part3/TE_Josefa/TE_library_josefa.fasta',
                              '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/male_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
  signature = plot_signature(TE_names[i], '~/Anopheles_part3/TE_Josefa/TE_library_josefa.fasta',
                             '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/male_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam.fasta')
  bias = plot_bias(TE_names[i], 
                   '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/male_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
  
  mh1 = arrangeGrob(coverage, signature, bias, nrow = 1, top = 'Male head 1')
  #
  
  coverage = plotcoverage_upd(TE_names[i],'~/Anopheles_part3/TE_Josefa/TE_library_josefa.fasta',
                              '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/male_head_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
  signature = plot_signature(TE_names[i], '~/Anopheles_part3/TE_Josefa/TE_library_josefa.fasta',
                             '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/male_head_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam.fasta')
  bias = plot_bias(TE_names[i], 
                   '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/male_head_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
  
  mh2 = arrangeGrob(coverage, signature, bias, nrow = 1, top = 'Male head 2')
  #
  
  coverage = plotcoverage_upd(TE_names[i],'~/Anopheles_part3/TE_Josefa/TE_library_josefa.fasta',
                              '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/male_head_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
  signature = plot_signature(TE_names[i], '~/Anopheles_part3/TE_Josefa/TE_library_josefa.fasta',
                             '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/male_head_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam.fasta')
  bias = plot_bias(TE_names[i], 
                   '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/male_head_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
  
  mh3 = arrangeGrob(coverage, signature, bias, nrow = 1, top = 'Male head 3')
  #
  coverage = plotcoverage_upd(TE_names[i],'~/Anopheles_part3/TE_Josefa/TE_library_josefa.fasta',
                              '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/male_thorax_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
  signature = plot_signature(TE_names[i], '~/Anopheles_part3/TE_Josefa/TE_library_josefa.fasta',
                             '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/male_thorax_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam.fasta')
  bias = plot_bias(TE_names[i], 
                   '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/male_thorax_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
  
  mt1 = arrangeGrob(coverage, signature, bias, nrow = 1, top = 'Male thorax 1')
  
  #
  coverage = plotcoverage_upd(TE_names[i],'~/Anopheles_part3/TE_Josefa/TE_library_josefa.fasta',
                              '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/male_thorax_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
  signature = plot_signature(TE_names[i], '~/Anopheles_part3/TE_Josefa/TE_library_josefa.fasta',
                             '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/male_thorax_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam.fasta')
  bias = plot_bias(TE_names[i], 
                   '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/male_thorax_rep2_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
  
  mt2 = arrangeGrob(coverage, signature, bias, nrow = 1, top = 'Male thorax 2')
  #
  coverage = plotcoverage_upd(TE_names[i],'~/Anopheles_part3/TE_Josefa/TE_library_josefa.fasta',
                              '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/male_thorax_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
  signature = plot_signature(TE_names[i], '~/Anopheles_part3/TE_Josefa/TE_library_josefa.fasta',
                             '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/male_thorax_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam.fasta')
  bias = plot_bias(TE_names[i], 
                   '~/Anopheles_part5/align_to_TE_snRNA_aligned_to_genome_V3/F4_flag/male_thorax_rep3_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam.fasta.sam.F4.bam')
  
  mt3 = arrangeGrob(coverage, signature, bias, nrow = 1, top = 'Male thorax 3')
  
  
  #
  
  g = grid.arrange(fh1, fh2, fh3, ft1, ft2, ft3, mh1, mh2, mh3, mt1, mt2, mt3, nrow = 12)
  
  setwd('~/Anopheles_part5/pictures_TE/')
  ggsave(paste(unlist(lapply(strsplit(TE_names[i], '#'), function(x)x[1])),'.pdf',sep=''), width = 25, height = 80, units = "cm", g)
}



a = plotcoverage_upd('Paris_full#DNA/TcMar-Tc1',
                     '~/TE_bases/44_TE/dvir_full-size_TEs.fasta',
                     '~/2021_year/Kelleher/piRNA_F2_to_genome_160/trimmed_smallRNA_data/SRR2096072_trimmed.fqF4.bam')

b = plot_signature('Paris_full#DNA/TcMar-Tc1',
                   '~/TE_bases/44_TE/dvir_full-size_TEs.fasta', 
                   '~/2021_year/Kelleher/piRNA_F2_to_genome_160/trimmed_smallRNA_data/fasta_debug.fasta')
c = plot_bias('Paris_full#DNA/TcMar-Tc1',
              '~/2021_year/Kelleher/piRNA_F2_to_genome_160/trimmed_smallRNA_data/SRR2096072_trimmed.fqF4.bam')


l = grid.arrange(a, b, c, nrow = 1)
setwd('~/')
ggsave('PLOT.pdf', width = 25, height = 7, units = "cm", l)
































#Из тех, кто выраввнивается на геном, интересно собрать, куда: на гены, на транспозоны, на фланки транспозонов? еще куда?

setwd('~/Anopheles_part5/align_others_sRNA_to_GENOME_ACOL/F4_flag/')

annotation = rtracklayer::import('~/Anopheles_part5/Acol_genome/AcolMOP1_annotation.gtf')
masker = read.table('~/Anopheles_part5/RepeatMasker/AcolMOP1_genome.fasta.out', fill = T)
masker = masker[c(3:136647),]
masker = na.omit(masker)
masker$V9 = ifelse(as.character(masker$V9) == '+', '+', '-')

TE_base = readDNAStringSet('~/Anopheles/reference/TE_base/TE_library_josefa.fasta')
TEs = data.frame(name = unlist(lapply(strsplit(TE_base@ranges@NAMES, '#'), function(x)x[1])),
                 width = TE_base@ranges@width)

masker$TE_length = TEs[match(masker$V10, TEs$name),]$width
masker$percent = (as.numeric(as.character(masker$V7)) - as.numeric(as.character(masker$V6)))/masker$TE_length

RM = GRanges(seqnames = as.character(masker$V5), ranges = IRanges(start = as.numeric(as.character(masker$V6)), 
                                                                  end = as.numeric(as.character(masker$V7))),
             strand = masker$V9,
             TE_len = masker$TE_length,
             percent = masker$percent)

mh1 = bam_to_df('male_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.F4.bam')
mh1_GR = GRanges(seqnames = mh1$rname, ranges = IRanges(start = mh1$pos, width = mh1$qwidth), strand = mh1$strand)



#intersect with TEs:
mh1_TE = subsetByOverlaps()













#bam DE genes, genes with small rna GO
#didn't align, peak 30, what 

mh1 = bam_to_df('~/Anopheles_part4/align_others_sRNA_to_GENOME_ACOL_V3/flag_f4/male_head_rep1_trimmed.fastq.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam.fasta.sam.f4.bam')
View(as.data.frame(table(mh1$seq)))

#CGTCTTCACGAGTTTAAACCAGTTGATCGA


ggplot() + 
  geom_logo('CGTCTTCACGAGTTTAAACCAGTTGATCGA') +
  theme_void()

###########aligned_to_a genome

setwd('~/Anopheles_part4/align_others_sRNA_to_GENOME_ACOL_V1/')
featurecounts = read.table('counts_AcolMOP1_annotation', header=TRUE, sep="\t", row.names=1 )
featurecounts = featurecounts[,c(5:17)]
colnames(featurecounts) = c('Length', 'mh1', 'mh2', 'mh3', 'mt1', 'mt2', 'mt3',
                            'fh1', 'fh2', 'fh3', 'ft1', 'ft2', 'ft3')
save = featurecounts


#convert to rpm
featurecounts$Length = NULL
featurecounts$mh1 = featurecounts$mh1 * 1000000 / sum(featurecounts$mh1)
featurecounts$mh2 = featurecounts$mh2 * 1000000 / sum(featurecounts$mh2)
featurecounts$mh3 = featurecounts$mh3 * 1000000 / sum(featurecounts$mh3)
featurecounts$mt1 = featurecounts$mt1 * 1000000 / sum(featurecounts$mt1)
featurecounts$mt2 = featurecounts$mt2 * 1000000 / sum(featurecounts$mt2)
featurecounts$mt3 = featurecounts$mt3 * 1000000 / sum(featurecounts$mt3)
featurecounts$fh1 = featurecounts$fh1 * 1000000 / sum(featurecounts$fh1)
featurecounts$fh2 = featurecounts$fh2 * 1000000 / sum(featurecounts$fh2)
featurecounts$fh3 = featurecounts$fh3 * 1000000 / sum(featurecounts$fh3)
featurecounts$ft1 = featurecounts$ft1 * 1000000 / sum(featurecounts$ft1)
featurecounts$ft2 = featurecounts$ft2 * 1000000 / sum(featurecounts$ft2)
featurecounts$ft3 = featurecounts$ft3 * 1000000 / sum(featurecounts$ft3)
featurecounts$max_value = apply(featurecounts, 1, max)
featurecounts = featurecounts[featurecounts$max_value > 1000,]
featurecounts$min_value = apply(featurecounts, 1, min)
featurecounts = featurecounts[featurecounts$min_value > 0,]

featurecounts$max_value = NULL
featurecounts$min_value = NULL


#132 genes with small rnas
pheatmap(log10(featurecounts), scale = 'row', main = 'log10(RPM to genes)')


write.table(featurecounts, '~/Anopheles_part4/pictures/GENES_FEATURE_COUNTS_ALL.out', row.names = T, col.names = T, quote = F)




#genes with huge small rnas: 
genes = c('AGAP028354',
          'AGAP003387',
          'AGAP029155',
          'AGAP012239',
          'AGAP008525',
          'AGAP029378',
          'AGAP012956')

res = featurecounts[rownames(featurecounts) %in% genes,]
pheatmap(log2(res), scale = 'none', main = '7 best genes')

#AGAP028354 vectorbase : miRNA 71



#man head vs girl head
heads = featurecounts[,c(2, 3, 4, 8, 9, 10)]
#heads = featurecounts[,c(5, 6, 7, 11, 12, 13)]
#heads = featurecounts[,c(2:7)]

colData <- data.frame("replicate" = c("R1","R2","R3", "R1","R2","R3"), "treatment" = c("male","male","male", "female","female","female"))
attributes(colData)$row.names <- c("R1.m","R2.m","R3.m", "R1.f","R2.f", "R3.f")
#analyze
dds <- DESeqDataSetFromMatrix(countData = heads, colData = colData, design = ~ replicate + treatment)
dds$treatment <- relevel(dds$treatment, ref = "female")
dds$replicate <- relevel(dds$replicate, ref = "R1")

keep50 <- rowSums(counts(dds)) >= 50
dds50 <- dds[keep50,]
dds50 <- DESeq(dds50)
res2 <- results(dds50,contrast=c("treatment","male","female"))
res2 <- as.data.frame(res2)

expressed_and_passed <- res2[res2$padj < 0.05,]


expressed_and_passed$names = rownames(expressed_and_passed)


expressed_and_passed$label = ifelse(abs(expressed_and_passed$log2FoldChange) > 2, rownames(expressed_and_passed), NA)

ggplot(data = expressed_and_passed, aes(x = log2FoldChange, y = -log10(pvalue), col = log10(baseMean))) +
theme_bw() + geom_point() + 
  geom_label_repel(aes(label = expressed_and_passed$label),
                   box.padding   = 0.2, 
                   point.padding = 0.5,
                   segment.color = 'grey50') +
  xlab('log2FC, ref = male') +
  ggtitle('Mmale, ref = thorax, head vs thorax. 146 statistically significant genes')


head_table = write.table(expressed_and_passed, '~/Anopheles_part4/pictures/heads.out',
                         row.names = T, col.names = T, quote = F)




genome = readDNAStringSet('~/Anopheles_part3/Acol_genome/AcolMOP1_genome.fasta')
View(as.data.frame(genome@ranges@NAMES))
genome[genome@ranges@NAMES == 'CM029351.1',]@ranges@width




